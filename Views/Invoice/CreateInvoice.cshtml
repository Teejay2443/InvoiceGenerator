@using InvoiceGenerator.Dto
@{
    ViewData["Title"] = "Create Invoice";
}

<div class="col-md-8">
    <form asp-controller="Invoice" asp-action="CreateInvoice">
        <div class="mb-3">
            <label class="form-label">Customer Name</label>
            <input type="text" class="form-control" name="BuyerName" placeholder="CustomerName" required>
        </div>

        <label for="ServiceRenderred" class="form-label">Service Rendered</label>
        @if (ViewData["SelectService"] != null)
        {
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="serviceDropdown" aria-expanded="false" onclick="toggleDropdown('serviceDropdown')">
                    Select Services
                </button>
                <ul class="dropdown-menu" aria-labelledby="serviceDropdown" id="serviceDropdownMenu">
                    @foreach (var service in ViewData["SelectService"] as List<SelectServiceDto>)
                    {
                        <li>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="ServiceRenderred" value="@service.Name" id="service-@service.Name" onchange="updateSelected('ServiceRenderred', 'selectedServicesBox')" />
                                <label class="form-check-label" for="service-@service.Name">@service.Name</label>
                            </div>
                        </li>
                    }
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <a class="dropdown-item text-primary" href="@Url.Action("CreateService", "Service")">
                            Create New Service
                        </a>
                    </li>
                </ul>
            </div>
            <div class="mt-3">
                <label>Selected Services:</label>
                <div id="selectedServicesBox" class="border rounded p-2" style="min-height: 50px;">
                    <em>No services selected</em>
                </div>
            </div>
        }
        else
        {
            <div>No Service available</div>
        }

        <label for="AreaOfCoverage" class="form-label">Area of Coverage</label>
        @if (ViewData["SelectArea"] != null)
        {
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="areaDropdown" aria-expanded="false" onclick="toggleDropdown('areaDropdown')">
                    Select Area of Coverage
                </button>
                <ul class="dropdown-menu" aria-labelledby="areaDropdown" id="areaDropdownMenu">
                    @foreach (var area in ViewData["SelectArea"] as List<SelectAreaDto>)
                    {
                        <li>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="AreaOfCoverage" value="@area.Name" id="area-@area.Name" onchange="updateSelected('AreaOfCoverage', 'selectedAreasBox')" />
                                <label class="form-check-label" for="area-@area.Name">@area.Name</label>
                            </div>
                        </li>
                    }
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <a class="dropdown-item text-primary" href="@Url.Action("CreateArea", "Area")">
                            Create New Area
                        </a>
                    </li>
                </ul>
            </div>
            <div class="mt-3">
                <label>Selected Areas:</label>
                <div id="selectedAreasBox" class="border rounded p-2" style="min-height: 50px;">
                    <em>No areas selected</em>
                </div>
            </div>
        }
        else
        {
            <div>No area available</div>
        }

        <div class="mb-3">
            <label class="form-label">Customer Address</label>
            <input type="text" class="form-control" name="Address" placeholder="Customer Address" required>
        </div>

        <div class="mb-3">
            <label class="form-label">Service Start Date</label>
            <input type="date" class="form-control" name="ServiceStartDate" required>
        </div>

        <div class="mb-3">
            <label class="form-label">Service End Date</label>
            <input type="date" class="form-control" name="ServiceEndDate" required>
        </div>

        <div class="mb-3">
            <label class="form-label">Total Cost</label>
            <input type="number" class="form-control" name="TotalCost" placeholder="Total Cost" required>
        </div>

        <div class="row">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </form>
    <script>
        function toggleDropdown(dropdownId) {
            const dropdownMenu = document.getElementById(`${dropdownId}Menu`);
            const button = document.getElementById(dropdownId);

            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            button.setAttribute('aria-expanded', !isExpanded);
            dropdownMenu.style.display = isExpanded ? 'none' : 'block';
        }
        document.addEventListener('click', function (event) {
            // Close other dropdowns if clicked outside
            ['serviceDropdown', 'areaDropdown'].forEach(dropdownId => {
                const dropdown = document.getElementById(dropdownId);
                const dropdownMenu = document.getElementById(`${dropdownId}Menu`);

                if (event.target !== dropdown && !dropdownMenu.contains(event.target)) {
                    dropdownMenu.style.display = 'none';
                    dropdown.setAttribute('aria-expanded', 'false');
                }
            });
        });
        function updateSelected(name, displayBoxId) {
            const checkboxes = document.querySelectorAll(`input[name="${name}"]:checked`);
            const displayBox = document.getElementById(displayBoxId);
            const selectedValues = Array.from(checkboxes).map(checkbox => checkbox.value);
            displayBox.innerHTML = selectedValues.length > 0 ? selectedValues.join(', ') : '<em>No items selected</em>';
        }
    </script>
</div>



